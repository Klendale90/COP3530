class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    # Insert at the beginning (O(1))
    def insert_at_head(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Insert at the end (O(n))
    def insert_at_tail(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node

    # Delete a node by value (O(n))
    def delete(self, value):
        curr = self.head
        prev = None
        while curr and curr.data != value:
            prev = curr
            curr = curr.next
        if curr is None:
            return  # Not found
        if prev is None:
            self.head = curr.next
        else:
            prev.next = curr.next 
